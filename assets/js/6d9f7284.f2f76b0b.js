"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4673],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(n),k=a,d=u["".concat(p,".").concat(k)]||u[k]||m[k]||o;return n?r.createElement(d,l(l({ref:t},c),{},{components:n})):r.createElement(d,l({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2874:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>k,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],i={id:"ckb-core-dev",title:"Tips for CKB development"},p=void 0,s={unversionedId:"essays/ckb-core-dev",id:"essays/ckb-core-dev",title:"Tips for CKB development",description:"Nervos CKB is the layer 1 of Nervos Network, a public/permissionless blockchain, which is an open source project on github. There are some tips for ckb development below, hope it will be useful for you.",source:"@site/docs/essays/ckb-core-dev.md",sourceDirName:"essays",slug:"/essays/ckb-core-dev",permalink:"/docs/essays/ckb-core-dev",draft:!1,editUrl:"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/essays/ckb-core-dev.md",tags:[],version:"current",frontMatter:{id:"ckb-core-dev",title:"Tips for CKB development"},sidebar:"defaultSidebar",previous:{title:"Tools",permalink:"/docs/basics/tools"},next:{title:"Tips for debugging CKB script",permalink:"/docs/essays/debug"}},c={},m=[{value:"Molecule",id:"molecule",level:2},{value:"Well-known Hashes",id:"well-known-hashes",level:2},{value:"Running Test",id:"running-test",level:2},{value:"Debug CKB",id:"debug-ckb",level:2},{value:"Track Memory Usage in Logs",id:"track-memory-usage-in-logs",level:3},{value:"Profile Memory",id:"profile-memory",level:3},{value:"References",id:"references",level:3}],u={toc:m};function k(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb"},"Nervos CKB")," is the layer 1 of Nervos Network, a public/permissionless blockchain, which is an open source project on github. There are some tips for ckb development below, hope it will be useful for you."),(0,o.kt)("h2",{id:"molecule"},"Molecule"),(0,o.kt)("p",null,"We have developed a particular serialization format called ",(0,o.kt)("strong",{parentName:"p"},"Molecule"),".It is recommended to check the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/molecule"},"molecule github repo")," for more details."),(0,o.kt)("h2",{id:"well-known-hashes"},"Well-known Hashes"),(0,o.kt)("p",null,"The command ",(0,o.kt)("inlineCode",{parentName:"p"},"ckb list-hashes")," prints the well-known hashes for current\neffective chain spec."),(0,o.kt)("p",null,"The file ",(0,o.kt)("inlineCode",{parentName:"p"},"docs/hashes.toml")," in ckb release package and source code repository\ncontains the well-known hashes for all the bundled chain specs. The file is\ngenerated by:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cargo run list-hashes -b > docs/hashes.toml\n")),(0,o.kt)("h2",{id:"running-test"},"Running Test"),(0,o.kt)("p",null,"Install dependencies"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"rustup component add rustfmt\nrustup component add clippy\n")),(0,o.kt)("p",null,"Run tests"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"make ci\n")),(0,o.kt)("p",null,"Run acceptance integration tests"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"make integration\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"debug-ckb"},"Debug CKB"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note: Only support linux system.")),(0,o.kt)("h3",{id:"track-memory-usage-in-logs"},"Track Memory Usage in Logs"),(0,o.kt)("p",null,"Add the follow configuration into ",(0,o.kt)("inlineCode",{parentName:"p"},"ckb.toml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'[logger]\nfilter = "error,ckb-memory-tracker=trace"\n\n[memory_tracker]\n# Seconds between checking the process, 0 is disable, default is 0.\ninterval = 600\n')),(0,o.kt)("h3",{id:"profile-memory"},"Profile Memory"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Compile ",(0,o.kt)("inlineCode",{parentName:"p"},"ckb")," with feature ",(0,o.kt)("inlineCode",{parentName:"p"},"profiling"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"make build-for-profiling\n")),(0,o.kt)("p",{parentName:"li"},"After compiling, a script named ",(0,o.kt)("inlineCode",{parentName:"p"},"jeprof")," will be generated in ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," direcotry."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'find target/ -name "jeprof"\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Enable RPC module ",(0,o.kt)("inlineCode",{parentName:"p"},"Debug")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"ckb.toml"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'[rpc]\nmodules = ["Debug"]\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"ckb"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Dump memory usage to a file via call RPC ",(0,o.kt)("inlineCode",{parentName:"p"},"jemalloc_profiling_dump"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'curl -H \'content-type: application/json\' -d \'{ "id": 2, "jsonrpc": "2.0", "method": "jemalloc_profiling_dump", "params": [] }\' http://localhost:8114\n')),(0,o.kt)("p",{parentName:"li"},"Then, a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"ckb-jeprof.$TIMESTAMP.heap")," will be generated in the working directory of the running ",(0,o.kt)("inlineCode",{parentName:"p"},"ckb"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Generate a PDF of the call graph."),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Required"),": graphviz and ghostscript"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"jeprof --show_bytes --pdf target/debug/ckb ckb-jeprof.$TIMESTAMP.heap > call-graph.pdf\n")))),(0,o.kt)("h3",{id:"references"},"References"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/jemalloc/jemalloc/wiki/Use-Case%3A-Leak-Checking"},"JEMALLOC: Use Case: Leak Checking")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/jemalloc/jemalloc/wiki/Use-Case%3A-Heap-Profiling"},"JEMALLOC: Use Case: Heap Profiling")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/facebook/rocksdb/wiki/Memory-usage-in-RocksDB"},"RocksDB: Memory usage in RocksDB"))))}k.isMDXComponent=!0}}]);